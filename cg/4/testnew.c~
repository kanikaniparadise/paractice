#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <GL/glut.h>

int rubberband = 0;        /* ラバーバンドの消去 */
double vertex[35947][3];
int line[69451][3];
int numofv=0;
int numoff=0;

float lookx;
float looky;
//視点関係//
double eye[3]={7,3,1};
double pov[3]={0,0,0};
double up[3]={0,1,0};
int x0=0;
double dx=0;




typedef struct{
    double a;
    double b;//i成分
    double c;//j成分
    double d;//k成分
} Qua;

void showq(Qua v){
    printf("%+8.3f    %+8.3f %+8.3f %+8.3f \n",v.a,v.b,v.c,v.d);
}

Qua qua_add(Qua q1,Qua q2){
    Qua ret;
    ret.a = q1.a + q2.a;
    ret.b = q1.b + q2.b;
    ret.c = q1.c + q2.c;
    ret.d = q1.d + q2.d;
    return ret;
}
Qua bar(Qua q){
    Qua ret;
    ret.a =  q.a;
    ret.b = -q.b;
    ret.c = -q.c;
    ret.d = -q.d;
    return ret;
}
Qua qua_mul(Qua q1,Qua q2){
    Qua ret;
    double a1=q1.a;     double a2=q2.a;
    double b1=q1.b;     double b2=q2.b;
    double c1=q1.c;     double c2=q2.c;
    double d1=q1.d;     double d2=q2.d;
    ret.a = a1*a2 - b1*b2 - c1*c2 - d1*d2;// 1成分
    ret.b = b1*a2 + a1*b2 - d1*c2 + c1*d2;// i成分
    ret.c = c1*a2 + d1*b2 + a1*c2 - b1*d2;// j成分
    ret.d = d1*a2 - c1*b2 + b1*c2 + a1*d2;// k成分
    return ret;  
}
double norm(Qua q){
    double a=q.a;
    double b=q.b;
    double c=q.c;
    double d=q.d;
    return sqrt(a*a+b*b+c*c+d*d);
}
Qua normalize(Qua q){
    double n = norm(q);
    if(n<1e-10){ puts("Error: normalize()  norm is almost 0"); exit(-1); }
    double inv = 1.0/n;
    q.a *= inv;    q.b *= inv;    q.c *= inv;    q.d *= inv;
    return q;
}
Qua getq(double rad, Qua u){
    Qua ret;
    ret.a = cos(rad/2);
    ret.b = sin(rad/2)*u.b;
    ret.c = sin(rad/2)*u.c;
    ret.d = sin(rad/2)*u.d;
    return ret;
}

//原点を通る任意軸回転
void rot0(double *p0, double *axis, double rad, double *p1){// u:回転軸の方向ベクタ
    Qua u,src;
    u.a  =0;   u.b  =axis[0]; u.c  =axis[1]; u.d  =axis[2];
    src.a=0;   src.b=p0[0];   src.c=p0[1];   src.d=p0[2];
    u = normalize(u);
    Qua q   = getq(rad,u);
    Qua qa  = qua_mul(q,src);
    Qua dst = qua_mul(qa,bar(q));
    p1[0]=dst.b;
    p1[1]=dst.c;
    p1[2]=dst.d;
}

//任意軸回転
void rot(double *p0, double *axis, double *ofs, double rad, double *p1){
    // ofsを原点に並行移動してから回転し、その後にもどす
    double org[3];    org[0]=p0[0];    org[1]=p0[1];     org[2]=p0[2]; 
    //平行移動（往路）
    org[0]-=ofs[0];   org[1]-=ofs[1];   org[2]-=ofs[2];
    //原点を通る軸で回転
    rot0(org,axis,rad, p1);
    //平行移動（復路）
    p1[0]+=ofs[0];    p1[1]+=ofs[1];    p1[2]+=ofs[2];
}









int pointnum = 0; 
#define W 6                        /* 地面の幅の２分の１　 */
#define D 9                        /* 地面の長さの２分の１ */
static void myGround(double height)
{
  const static GLfloat ground[][4] = {
    { 0.6, 0.6, 0.6, 1.0 },
    { 0.3, 0.3, 0.3, 1.0 }
  };

  int i, j;

  glBegin(GL_QUADS);
  glNormal3d(0.0, 1.0, 0.0);
  for (j = -D; j < D; ++j) {
    for (i = -W; i < W; ++i) {
      glMaterialfv(GL_FRONT, GL_DIFFUSE, ground[(i + j) & 1]);
      glVertex3d((GLdouble)i, height, (GLdouble)j);
      glVertex3d((GLdouble)i, height, (GLdouble)(j + 1));
      glVertex3d((GLdouble)(i + 1), height, (GLdouble)(j + 1));
      glVertex3d((GLdouble)(i + 1), height, (GLdouble)j);
    }
  }
  glEnd();
}

double vertex2[][3]={
  {0,0,0},
  {2,0,0},
  {2,0,2},
  {0,0,2},
  {1,2,1}
};
int line2[][3]={
  {1,2,5},
  {2,3,5},
  {3,4,5},
  {4,1,5},
  {1,2,3},
  {1,3,4}
};

GLdouble normal[][3] = {
  { 0.0, 0.0,-1.0 },
  { 1.0, 0.0, 0.0 },
  { 0.0, 0.0, 1.0 },
  {-1.0, 0.0, 0.0 },
  { 0.0,-1.0, 0.0 },
  { 0.0, 1.0, 0.0 }
};
GLfloat red[] = { 0.8, 0.2, 0.2, 1.0 };
int seeingx=1;





void display(void)
{
  printf("%s\n","startdisp");
  //  printf("%d\n",line);
  glClear(GL_COLOR_BUFFER_BIT);
  //myGround(0.0);
  /* 図形の描画 */
  glColor3d(0.0, 0.0, 0.0);
  glBegin(GL_TRIANGLES);
  int i;
  for (i = 0; i < numoff; ++i) {
    
    glVertex3dv(vertex[line[i][0]-1]);
    
    glVertex3dv(vertex[line[i][1]-1]);
    
    glVertex3dv(vertex[line[i][2]-1]);
    
  }
  //
  printf("%s\n","fin");
  glEnd();
  gluLookAt(eye[0],eye[1],eye[2],pov[0],pov[1],pov[2],up[0],up[1],up[2]);
  glFlush();
}
void resize(int w, int h)
{
  glViewport(0, 0, w, h);
  
  glLoadIdentity();
  gluPerspective(30.0, (double)w / (double)h, 1.0, 100.0);

 
}



void mouse(int button, int state, int x, int y)
{
  switch (button) {
  case GLUT_LEFT_BUTTON:
    /* ボタンを操作した位置を記録する */
    point[pointnum][0] = x;
    point[pointnum][1] = y;
    if (state == GLUT_UP) {
      /* ボタンを押した位置から離した位置まで線を引く */
      glColor3d(0.0, 0.0, 0.0);
      glBegin(GL_LINES);
      glVertex2iv(point[pointnum - 1]); /* 一つ前は押した位置　 */
      glVertex2iv(point[pointnum]);     /* 今の位置は離した位置 */
      glEnd();
      glFlush();

      /* 始点ではラバーバンドを描いていないので消さない */
      rubberband = 0;
    }
    else {
    }
    if (pointnum < MAXPOINTS) ++pointnum;
    break;
  case GLUT_MIDDLE_BUTTON:
    break;
  case GLUT_RIGHT_BUTTON:
    break;
  default:
    break;
  }
}

void motion(int x, int y)
{
  static GLint savepoint[2]; /* 以前のラバーバンドの端点 */

  /* 論理演算機能 ON */
  glEnable(GL_COLOR_LOGIC_OP);
  glLogicOp(GL_INVERT);

  glBegin(GL_LINES);
  if (rubberband) {
    /* 以前のラバーバンドを消す */
    glVertex2iv(point[pointnum - 1]);
    glVertex2iv(savepoint);
  }
  /* 新しいラバーバンドを描く */
  glVertex2iv(point[pointnum - 1]);
  glVertex2i(x, y);
  glEnd();

  glFlush();

  /* 論理演算機能 OFF */
  glLogicOp(GL_COPY);
  glDisable(GL_COLOR_LOGIC_OP);

  /* 今描いたラバーバンドの端点を保存 */
  savepoint[0] = x;
  savepoint[1] = y;
 
  /* 今描いたラバーバンドは次のタイミングで消す */
  rubberband = 1;
}





/*
void motion(int x, int y){
  int i;
 for(i=0;i<3;i++){
   printf("%f\n",eye[i]);
  }
  for(i=0;i<3;i++){
   printf("%f\n",pov[i]);
  }
  dx=(x0-x)/10;
  eye[0]+=dx;
  pov[0]+=dx;
  printf("%f\n",dx);
  //gluLookAt(eye[0],eye[1],eye[2],pov[0],pov[1],pov[2],up[0],up[1],up[2]);
  glutPostRedisplay();
  glFlush();
  x0=x;
  
}
*/

//void idle(void){
//gluLookAt(eye[0],eye[1],eye[2],pov[0],pov[1],pov[2],up[0],up[1],up[2]);
//glutPostRedisplay();
//}




void init(void)
{
  glClearColor(1.0, 1.0, 1.0, 1.0);
   FILE *fp; // FILE型構造体
  //char fname[] = "bunny.obj";
  char fname[] = "bunny.obj";
  
  char hed[10];

  
  int vertexnum=0;
  int linenum = 0;
	
  fp = fopen(fname, "r"); // ファイルを開く。失敗するとNULLを返す。
  if(fp == NULL) {
    printf("%s file not open!\n", fname);
		
  }
  numoff=0;
  numofv=0;	
  while((fscanf(fp,"%s2",hed) != EOF)) {
    float num;
    int fnum;
    
    
    if(strcmp(hed,"v")==0){
      numofv++;
      int i;
      
      for(i=0;i<3;i++){
	fscanf(fp,"%f",&num);


	vertex[vertexnum][i]=num;
      }
      vertexnum=vertexnum+1;
    }
    else{
      if(strcmp(hed,"f")==0){
	numoff++;
	int i;
	for(i=0;i<3;i++){
	  fscanf(fp,"%d",&fnum);
		
	  //printf("%d",num);
	  //printf(" ");
	  line[linenum][i]=fnum;
	}
	linenum++;
	//printf("%s\n","<line");
      }
    }
    
    
  }
  fclose(fp); // ファイルを閉じる
 
}

int main(int argc, char *argv[]) {

  glutInitWindowPosition(100 , 50);
  glutInitWindowSize(400 , 300);






  glutInit(&argc, argv);
  glCullFace(GL_FRONT);
  

  glEnable(GL_LIGHTING);
  glEnable(GL_LIGHT0);
  glutInitDisplayMode(GLUT_RGBA);
  glutCreateWindow(argv[0]);
  glutDisplayFunc(display);
  glutMouseFunc(mouse);
  glutMotionFunc(motion);
  glutReshapeFunc(resize);
  //  glutIdleFunc(idle);
  init();
  glutMainLoop();
  return 0;
}
